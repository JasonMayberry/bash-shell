
######################################
####   Regular Expression Basics   ###
######################################

FROM: https://www.youtube.com/watch?v=KJG1dETacLI




jaso@jaso:~$ ls -d D*
Desktop  Documents  Downloads

jaso@jaso:~$ ls -d *s
Documents  Downloads  Pictures  Templates  Videos

jaso@jaso:~$ ls -d *l*
Downloads  Public  Templates

jaso@jaso:~$ less /usr/share/dict/american-english 

# How to use grep
jaso@jaso:~$ grep PATTERN /usr/share/dict/american-english

# Find all words that contain "cat"
jaso@jaso:~$ grep cat /usr/share/dict/american-english
vocation
vocation's
vocational
vocations
vocative

# Use double quotes to make sure shell commands are not prossed by mistake
grep "cat" /usr/share/dict/american-english

# Matches all words that contain a "c" folowed by any one character, folowed by a "t"
jaso@jaso:~$ grep "c.t" /usr/share/dict/american-english






####################
## Basic Elements ##
####################
	* Matches any single character
		.         - .at = bat, cat, mat
	* Matches the literal string "dog"
		dog    - dog = dog


# Getting Tricky
	* Matches a defined class of characters
		[a-c]at = Matches bat, cat but not rat
	* Matches any two number characters next to each other
		[0-9] [0-9] = 42, 37, 99, 01


# Matches all words that contain a "c" folowed by any one of the 
# defined characters in the set: "aeiou", folowed by a "t"
jaso@jaso:~$ grep "c[aeiou]t" /usr/share/dict/american-english


# Matches all words that contain a "c" folowed by any one of the defined characters 
# in the set: all lower case characters and all upper case characters, folowed by a "t"
jaso@jaso:~$ grep "c[a-zA-Z]t" /usr/share/dict/american-english


# Matches all words that contain a "c" folowed by any one of the defined 
# characters in the set: all lower case characters and all upper case 
# characters and all single digits and the "_", folowed by a "t"
jaso@jaso:~$ grep "c[a-zA-Z0-9_]t" /usr/share/dict/american-english

jaso@jaso:~$ grep [0-9] /etc/passwd






#####################################
##  Character Class Abbreviations  ##
#####################################
	* Character classes can be abbreviated
		[[:alpha:]] is the same as [a-zA-Z]
		[[:upper:]] is the same as [A-Z]
		[[:lower:]] is the same as [a-z]
		[[:digit:]] is the same as [0-9]
		[[:alnum:]] is the same as [O-9a-zA-Z]
		[[:space:]] matches any white space including tabs

# Character Class Abbreviations
	* Character classes can be abbreviated
		\d = [0-9]
		\w = [a-zA-Z0-9_]
		\s = [ \t\n\r\f]
	* Character classes can be negated
		\D = [^0-9]
		\W = [^a-zA-Z0-9_]
		\S = [^ \t\n\r\f]





####################
####   Anchors   ###
####################
	* We can require matches at the beginning or end of a line.
		^ca = car, cattle, canine
		ing$ = floating, sailing
		^cat$ = cat

# Examples
jaso@jaso:~$ egrep "^s" /etc/passwd
jaso@jaso:~$ egrep "h$" /etc/passwd
jaso@jaso:~$ egrep "bash$" /etc/passwd





############################
####   Word Boundaries   ###
############################
	* We can require matches at the beginning or end of a line.
		\b = match at word boundary
		\B = not at word boundary
		\< = same as above
		\> = same as above

# son\b = Jason The Prof
# Do not look for a match within larger words that contain the word.
jaso@jaso:~$ egrep "Jason\b" demo.txt



###########################
####   Sample RegExps   ###
###########################
	* Match a standard phone number.
		^[0-9]{3}-[0-9]{3}-[0-9]{4}$
	* Match an email address (poorly)
		^\w*@\w*\.\w*$

# Matches two sets of three digit long numbers and one set of four digit 
# long numbers with dashes between. Like a phone number.
jaso@jaso:~$ egrep "[0-9]{3}-[0-9]{3}-[0-9]{4}" lab3test.txt






########################
####   Quantifiers   ###
########################
	* We can quantify how many of a specific character should occur.
		+ = 1 or more of a character
		? = 0 or 1 of a character
		* = 0 or more of a character
		{3} = a certain number or range of characters

# "?" matches zero or one of the same character that is to its left
jaso@jaso:~$ egrep "bo?t" /usr/share/dict/american-english

# "+" matches one or more of the same character that is to its left
jaso@jaso:~$ egrep "bo+t" /usr/share/dict/american-english

# "*" matches zero or more of the same character that is to its left
jaso@jaso:~$ egrep "bo*t" /usr/share/dict/american-english






################
####   SED   ###
################
	* Stream editor
	* Modify a stream of data in some fashion.
	* The following line will substitute all ":" in the passwd file with a "-"

# Replaces every colon in the file with a dash
jaso@jaso:~$ sed -e 's/:/-/g' /etc/passwd

# The "s" stands for string and the "g" stands for global or the entire file 
# s/findthis/replacewiththis/g
jaso@jaso:~$ sed -e 's///g' /etc/passwd

# Replaces every colon in the file with three consecutive dashes
jaso@jaso:~$ sed -e 's/:/---/g' /etc/passwd

# Replaces every "bin" in the file with "JASON"
jaso@jaso:~$ sed -e 's/bin/JASON/g' /etc/passwd

# Replaces only the "bin" at the start of the line in the whole file with "JASON"
jaso@jaso:~$ sed -e 's/^bin/JASON/g' /etc/passwd



